#!/usr/bin/env bash
set -e
set -o pipefail

function store_env_variables {
    BUMP_VERSION_TYPE=$1
    PACKAGE_VERSION_TARGET=$(jq -r ".version" < package.json)

    echo "export BUMP_VERSION_TYPE=$BUMP_VERSION_TYPE" >> ./workspace_variables/custom-env-variables
    echo "export PACKAGE_VERSION_TARGET=$PACKAGE_VERSION_TARGET" >> ./workspace_variables/custom-env-variables

    echo "Custom variables:"
    cat ./workspace_variables/custom-env-variables
}

function check_branch_name_validity {
    branch_name=$1
    branch_name_prefix_pattern='([[:alpha:]]+)\/[[:punct:][:alnum:]]+'
    snyk_name_prefix='(snyk\-upgrade\-[0-9a-f]{5,40})'
    not_semver_prefix_pattern='^docs|ci|chore|test$'
    patch_semver_prefix_pattern='^bugfix|fix|hotfix|greenkeeper|snyk\-upgrade\-[0-9a-f]{5,40}$'
    minor_semver_prefix_pattern='^feature|feat$'

    if [[ $branch_name =~ $branch_name_prefix_pattern ||  $branch_name =~ $snyk_name_prefix ]]; then
        branch_name_prefix=${BASH_REMATCH[1]}

        echo "=============================================================="
        echo "Regex input: ${BASH_REMATCH[0]}"
        echo "Branch name prefix: $branch_name_prefix"
        echo "=============================================================="

        if [[ $branch_name_prefix =~ $not_semver_prefix_pattern ]] || [[ $branch_name_prefix =~ $patch_semver_prefix_pattern ]] || [[ $branch_name_prefix =~ $minor_semver_prefix_pattern ]]; then
            
            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
                # git checkout because npm version commands needs working directory clean
                git checkout .

                if [[ $branch_name_prefix =~ $patch_semver_prefix_pattern ]]; then
                    echo "auto semver patch for branch $branch_name_prefix"
                    npm version patch
                    store_env_variables "PATCH"
                elif [[ $branch_name_prefix =~ $minor_semver_prefix_pattern ]]; then
                    echo "auto semver feature for branch $branch_name_prefix"
                    npm version minor
                    store_env_variables "MINOR"
                elif [[ $branch_name_prefix =~ $not_semver_prefix_pattern ]]; then
                    echo "not auto semver for branch $branch_name_prefix" 
                    echo "This merge will be skip production deployment process. You can check the application state on Staging environment."
                    store_env_variables "NOTSEMVER"
                fi
            fi
            echo "OK! your branch called '$branch_name' use the right convention names"
        fi
    else
        echo "ERROR: your branch called '$branch_name' does not follow the branch name policies."
    fi

    echo "See more information in CONTRIBUTING.md https://www.github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/blob/master/CONTRIBUTING.md"
}

mkdir ./workspace_variables
touch ./workspace_variables/custom-env-variables

if [[ "$CIRCLE_BRANCH" == "master" ]]; then
    merge_commit_message_pattern='Merge[[:space:]]+pull[[:space:]]+request[[:space:]]+#[0-9]+[[:space:]]+from[[:space:]]+([[:alpha:]]+)\/([[:punct:][:alnum:]]+)'
    last_commit_message=$(git log --oneline --merges -1)

    [[ "$last_commit_message" =~ $merge_commit_message_pattern ]]

    contributorUsername=${BASH_REMATCH[1]}
    contributorBranchName=${BASH_REMATCH[2]}

    echo "=============================================================="
    echo "Regex input: ${BASH_REMATCH[0]}"
    echo "Contributor username: $contributorUsername"
    echo "Merged branch: $contributorBranchName"
    echo "=============================================================="

    check_branch_name_validity $contributorBranchName
else
    check_branch_name_validity $CIRCLE_BRANCH
fi
